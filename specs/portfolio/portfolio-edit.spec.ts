declare const allure: any;
import Steps from '../../utils/steps/steps';
import Check from '../../utils/check';

const TestData = {
  INITIAL_PORTFOLIO_NAME: 'regression test portfolio',
  NEW_PORTFOLIO_NAME    : 'new test portfolio',
  INITIAL_CLIENT        : '38 Degrees North',
  NEW_CLIENT            : 'DC Solar',
  INITIAL_ASSIGNEE      : '_ Support at Radian',
  NEW_ASSET_MANAGER     : '_CI _Support'
};

xdescribe('Portfolio. Editing', function () {
  beforeEach(async function () {
    allure.feature('Portfolio');
    allure.story('Editing');
    await Steps.createPortfolioUnderManagement({
      name    : TestData.INITIAL_PORTFOLIO_NAME,
      client  : TestData.INITIAL_CLIENT,
      assignee: TestData.INITIAL_ASSIGNEE
    });
    await Check.isOnPage(TestData.INITIAL_PORTFOLIO_NAME);
    await Check.isCurrentEntityDataEqual({ client: TestData.INITIAL_CLIENT });
  });

  afterEach(async function () {
    await Steps.deleteCurrentlyViewedEntity();
  });

  it('4.1 - Can cancel data editing', async function () {
    await Steps.editCurrentEntity({
      name  : TestData.NEW_PORTFOLIO_NAME,
      client: TestData.NEW_CLIENT
    });
    await Steps.cancelEntityChanges();
    await Check.isOnPage(TestData.INITIAL_PORTFOLIO_NAME);
    await Check.isCurrentEntityDataEqual({ client: TestData.INITIAL_CLIENT });
  }); // TODO add more variations if needed

  it('4.2 - Can edit assignee data correctly', async function () {
    await Steps.updateCurrentEntity({ 'Asset Manager': TestData.NEW_ASSET_MANAGER });
    await Check.isOnPage(TestData.INITIAL_PORTFOLIO_NAME);
    await Check.isCurrentEntityDataEqual({
      'Asset Manager'                     : TestData.NEW_ASSET_MANAGER,
      'Compliance Lead'                   : TestData.INITIAL_ASSIGNEE,
      'Financial Preparer'                : TestData.INITIAL_ASSIGNEE,
      'Financial Reviewer'                : TestData.INITIAL_ASSIGNEE,
      'Assignee For Autogenerated Tickets': TestData.INITIAL_ASSIGNEE
    });
  }); // TODO add more tests on editing other assignee fields if needed

  it('4.3 - Can edit client name', async function () {
    await Steps.updateCurrentEntity({ client: TestData.NEW_CLIENT });
    await Check.isOnPage(TestData.INITIAL_PORTFOLIO_NAME);
    await Check.isCurrentEntityDataEqual({ client: TestData.NEW_CLIENT });
  });

  it('4.4 - Can edit portfolio name', async function () {
    await Steps.updateCurrentEntity({ name: TestData.NEW_PORTFOLIO_NAME });
    await Check.isOnPage(TestData.NEW_PORTFOLIO_NAME);
  });
});